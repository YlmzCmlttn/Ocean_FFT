#pragma kernel CS_CalculateInitialSpectrum
#pragma kernel CS_UpdateSpectrumForDFT
#pragma kernel CS_HeightMapDFT

#pragma kernel CS_UpdateSpectrumForFFT
#pragma kernel CS_PreComputeTwiddleFactorsAndInputIndices
#pragma kernel CS_HorizontalStepInverseFFT
#pragma kernel CS_VerticalStepInverseFFT
#pragma kernel CS_PermuteBuffer
#pragma kernel CS_AssembleHeightAndNormalMaps

#include "HelperFunctions.hlsl"

RWTexture2D<float4> _InitialSpectrumTexture;
RWTexture2D<float2> _UpdatedSpectrumTexture;
RWTexture2D<float4> _HeightMap;
RWTexture2D<float4> _NormalMap;

RWTexture2D<float2> _HTildeTexture;
RWTexture2D<float2> _HTildeSlopeXAxisTexture;
RWTexture2D<float2> _HTildeSlopeZAxisTexture;
RWTexture2D<float2> _HTildeSlopeDisplacementXAxisTexture;
RWTexture2D<float2> _HTildeSlopeDisplacementZAxisTexture;

RWTexture2D<float4> _PrecomputeBuffer;
Texture2D<float4> _PrecomputedData;
RWTexture2D<float2> _Buffer0;
RWTexture2D<float2> _Buffer1;
bool _Swap;
uint _Step;

float _FrameTime;
float _Wind_DirX;
float _Wind_DirY;
float _WindSpeed;
float _A;
int _PhysicalDomainLength;
int _Resolution;
float _Gravity;
float _RepeatTime;
float _Damping;
int _Seed;
float2 _MovementLambda;
float2 _NormalStrength;



float PhillipsSpectrum(float A,float windSpeed,float2 windDirection, float2 waveVector)
{
    float magnitudeOfWaveVector = length(waveVector);
    if(magnitudeOfWaveVector < 0.0001f) return 0.0f;

    float L = windSpeed * windSpeed / 9.8f;
    float2 unitVectorOfWindDirection = normalize(windDirection);
    float DotProduct_Of_Normalize_Both_WaveVector_And_WindDirection = dot(normalize(waveVector),unitVectorOfWindDirection);
    float k = magnitudeOfWaveVector;
    float kw = DotProduct_Of_Normalize_Both_WaveVector_And_WindDirection;

    float damping = _Damping;
    float l2 = L*L * damping * damping;
    float k2 = k * k;
    
    return A * exp(-1.0f/((k*L)*(k*L))) / (k*k*k*k) * (kw*kw)* (kw*kw)* (kw*kw)  * exp(-k2 * l2);
}


float2 CalculateTextureSample(float2 WaveVector,float A, float WindSpeed, float2 WindDirection, float2 randomNumber){
    return (1.0f / sqrt(2.0f)) * randomNumber * sqrt(PhillipsSpectrum(A,WindSpeed,WindDirection,WaveVector));
}


[numthreads(8,8,1)]
void CS_CalculateInitialSpectrum (uint3 id : SV_DispatchThreadID) {
    const uint seed = id.x + _Resolution * id.y + _Seed;

    const float n = id.x - _Resolution/2.0f;
    const float m = id.y - _Resolution/2.0f;


    const float2 WaveVector = float2(n,m) * 2.0 * PI / _PhysicalDomainLength;
    //Calculates PhillipsSpectrum 
    const float P = PhillipsSpectrum(_A,_WindSpeed,float2(_Wind_DirX,_Wind_DirY),WaveVector);
    const float sqrtP = sqrt(P);
    float4 uniforms = float4(hashFloat(seed),hashFloat(seed*2),hashFloat(seed*3),hashFloat(seed*4));
    
    const float4 gaussianRandomComplexNumbers = float4(UniformToGaussian(uniforms.x,uniforms.y),UniformToGaussian(uniforms.z,uniforms.w));

    float2 h0 = CalculateTextureSample(WaveVector,_A,_WindSpeed,float2(_Wind_DirX,_Wind_DirY),gaussianRandomComplexNumbers.xw);
    float2 h0_conjugate = CalculateTextureSample(-WaveVector,_A,_WindSpeed,float2(_Wind_DirX,_Wind_DirY),gaussianRandomComplexNumbers.yz);


    _InitialSpectrumTexture[id.xy] = float4(h0,h0_conjugate);    
}


[numthreads(8,8,1)]
void CS_UpdateSpectrumForDFT(uint3 id : SV_DISPATCHTHREADID) {
    float4 initialSpectrum = _InitialSpectrumTexture[id.xy];
    float2 h0 = initialSpectrum.xy;
    float2 h0conj = initialSpectrum.zw;

    const float n = id.x - _Resolution/2.0f;
    const float m = id.y - _Resolution/2.0f;

    const float2 WaveVector = float2(n,m) * 2.0 * PI / _PhysicalDomainLength;
    float w_0 = 2.0f * PI / _RepeatTime;
    const float omega = floor(sqrt(_Gravity * length(WaveVector)) / w_0) * w_0;
    float phase = omega * _FrameTime;

    float2 exp_iwt = EulerFormula(phase);
    float2 exp_iwt_neg = EulerFormula(-phase);

    // First term: h0(k)*exp(iωt)
    float2 term1 = ComplexMultiplication(h0, exp_iwt);
    // Second term: conj(h0(-k))*exp(-iωt)
    float2 term2 = ComplexMultiplication(h0conj, exp_iwt_neg);

    _UpdatedSpectrumTexture[id.xy] = term1 + term2;

}



// Direct Inverse DFT: For each spatial coordinate, sum over all frequency modes.
[numthreads(8,8,1)]
void CS_HeightMapDFT(uint3 id : SV_DispatchThreadID)
{
    

    // Map the output pixel to a spatial position.
    // We'll assume the spatial domain is centered at zero.
    //float spacing = _PhysicalDomainLength / _Resolution;
    float xPos = (id.x - _Resolution / 2.0);
    float yPos = (id.y - _Resolution / 2.0);
    float2 position = float2(xPos, yPos);

    float heightSum = 0.0;
    float2 normal = 0.0f;
    float2 displacement = 0.0f;

    // Loop over all frequency components.
    // m and n are indices in the Fourier domain.
    for (int m = 0; m < _Resolution; m++)
    {
        float kz = (m - _Resolution/2.0);
        for (int n = 0; n < _Resolution; n++)
        {
            // Map Fourier index (m, n) to frequency space.
            // Center the spectrum: indices run from -N/2 to +N/2.
            float kx = (n - _Resolution/2.0);
            // Wave vector: k = (kx, kz) * (2π / _PhysicalDomainLength)

            float2 waveVector = float2(kx, kz) * (2.0 * PI / _PhysicalDomainLength);

            // Read the Fourier coefficient (complex value) for this mode.
            float2 h_k = _UpdatedSpectrumTexture[uint2(n, m)];

            // Compute the phase: φ = k ⋅ x.
            float phase = dot(waveVector, position);

            // Compute e^(i * phase) = cos(phase) + i sin(phase).
            //float2 exp_iphi = float2(cos(phase), sin(phase));
            float2 exp_iphi = EulerFormula(phase);

            // Complex multiplication: h_k * e^(i*phase)
            // (a+ib)*(c+id) = (ac - bd) + i(ad+bc)
            //float realPart = h_k.x * exp_iphi.x - h_k.y * exp_iphi.y;
            // float imagPart = h_k.x * exp_iphi.y + h_k.y * exp_iphi.x; // (Not used)
            float2 hTilde = ComplexMultiplication(h_k,exp_iphi);
            float realPart = hTilde.x;


            // Sum up the real contribution.
            heightSum += realPart;
            normal += float2(-waveVector.x*hTilde.y,-waveVector.y*hTilde.y);
            float waveMag = length(waveVector);
            if (waveMag > 0.0001f)
                displacement += waveVector / waveMag * hTilde.y;
        }
    }

    // Normalize by the number of modes.
    //float N2 = _Resolution * _Resolution;
    //float height = heightSum / N2;

    float3 normal_result = float3(-normal.x,1.0f,-normal.y);
    normal_result = normalize(normal_result);
    

    // Write the computed height to the output height map.
    //_HeightMap[id.xy] = heightSum;
    _HeightMap[id.xy] = heightSum;
    _NormalMap[id.xy] = float4(normal_result,0.0f);
}


[numthreads(8, 8, 1)]
void CS_UpdateSpectrumForFFT(uint3 id : SV_DISPATCHTHREADID) {
    float4 initialSpectrum = _InitialSpectrumTexture[id.xy];
    float2 h0 = initialSpectrum.xy;
    float2 h0conj = initialSpectrum.zw;

    const float n = id.x - _Resolution/2.0f;
    const float m = id.y - _Resolution/2.0f;

    const float2 WaveVector = float2(n,m) * 2.0 * PI / _PhysicalDomainLength;
    float WaveMag = length(WaveVector);

    float w_0 = 2.0f * PI / _RepeatTime;
    const float omega = floor(sqrt(_Gravity * WaveMag) / w_0) * w_0;
    float phase = omega * _FrameTime;

    float2 exp_iwt = EulerFormula(phase);
    float2 exp_iwt_neg = EulerFormula(-phase);

    // First term: h0(k)*exp(iωt)
    float2 term1 = ComplexMultiplication(h0, exp_iwt);
    // Second term: conj(h0(-k))*exp(-iωt)
    float2 term2 = ComplexMultiplication(h0conj, exp_iwt_neg);

    float2 htilde = term1 + term2;

    float2 displacementX = ComplexMultiplication(htilde,float2(0,-WaveVector.x/WaveMag));
    float2 displacementZ = ComplexMultiplication(htilde,float2(0,-WaveVector.y/WaveMag));

    if (WaveMag < 0.00001f) {
        displacementX = 0;
        displacementZ = 0;
    }
       

    _HTildeTexture[id.xy] = htilde;
    _HTildeSlopeXAxisTexture[id.xy] = ComplexMultiplication(htilde, float2(0, WaveVector.x)); //Multiplying with iKx
    _HTildeSlopeZAxisTexture[id.xy] = ComplexMultiplication(htilde, float2(0, WaveVector.y)); //Multiplying with iKy
    _HTildeSlopeDisplacementXAxisTexture[id.xy] = displacementX;
    _HTildeSlopeDisplacementZAxisTexture[id.xy] = displacementZ;
}


float2 ComplexExp(float2 a) {
    return float2(cos(a.y), sin(a.y) * exp(a.x));
}


[numthreads(1, 8, 1)]
void CS_PreComputeTwiddleFactorsAndInputIndices(uint3 id : SV_DISPATCHTHREADID) {
    const int _N = _Resolution;
    uint b = _N >> (id.x + 1);
    float2 mult = 2 * PI * float2(0.0f, 1.0f) / _N;
    uint i = (2 * b * (id.y / b) + id.y % b) % _N;
    float2 twiddle = ComplexExp(-mult * ((id.y / b) * b));
    _PrecomputeBuffer[id.xy] = float4(twiddle, i, i + b);
    _PrecomputeBuffer[uint2(id.x, id.y + _N / 2)] = float4(-twiddle, i, i + b);
}

[numthreads(8,8,1)]
void CS_HorizontalStepInverseFFT(uint3 id : SV_DISPATCHTHREADID) {
    float4 data = _PrecomputedData[uint2(_Step, id.x)];

    uint2 inputsIndices = (uint2)data.ba;

    float2 x = 0.0f;
    float2 y = 0.0f;

    if (_Swap) {
        x = _Buffer0[uint2(inputsIndices.x, id.y)].rg;
        y = _Buffer0[uint2(inputsIndices.y, id.y)].rg;
    } else {
        x = _Buffer1[uint2(inputsIndices.x, id.y)].rg;
        y = _Buffer1[uint2(inputsIndices.y, id.y)].rg;
    }

    float2 output = x + ComplexMultiplication(float2(data.r, -data.g), y);

    if (_Swap)
        _Buffer1[id.xy] = float4(output, 0, 0);
    else
        _Buffer0[id.xy] = float4(output, 0, 0);
}


[numthreads(8,8,1)]
void CS_VerticalStepInverseFFT(uint3 id : SV_DISPATCHTHREADID) {
    float4 data = _PrecomputedData[uint2(_Step, id.y)];

    uint2 inputsIndices = (uint2)data.ba;

    float2 x = 0.0f;
    float2 y = 0.0f;

    if (_Swap) {
        x = _Buffer0[uint2(id.x, inputsIndices.x)].rg;
        y = _Buffer0[uint2(id.x, inputsIndices.y)].rg;
    } else {
        x = _Buffer1[uint2(id.x, inputsIndices.x)].rg;
        y = _Buffer1[uint2(id.x, inputsIndices.y)].rg;
    }

    float2 output = x + ComplexMultiplication(float2(data.r, -data.g), y);

    if (_Swap)
        _Buffer1[id.xy] = float4(output, 0, 0);
    else
        _Buffer0[id.xy] = float4(output, 0, 0);
}

[numthreads(8, 8, 1)]
void CS_PermuteBuffer(uint3 id : SV_DISPATCHTHREADID) {
    _Buffer0[id.xy] = _Buffer0[id.xy] * (1.0f - 2.0f * ((id.x + id.y) % 2));
}

[numthreads(8, 8, 1)]
void CS_AssembleHeightAndNormalMaps(uint3 id: SV_DISPATCHTHREADID) {
    float2 htilde = _HTildeTexture[id.xy];
    float2 slopeX = _HTildeSlopeXAxisTexture[id.xy] * _NormalStrength;
    float2 slopeZ = _HTildeSlopeZAxisTexture[id.xy] * _NormalStrength;
    float2 displacementX = _HTildeSlopeDisplacementXAxisTexture[id.xy];
    float2 displacementZ = _HTildeSlopeDisplacementZAxisTexture[id.xy];

    _HeightMap[id.xy] = float4(htilde.x, displacementX.x * _MovementLambda.x, displacementZ.x * _MovementLambda.y, 0);
    _NormalMap[id.xy] = float4(normalize(float3(-slopeX.x, 1.0f, -slopeZ.x)), 0.0f);
}
