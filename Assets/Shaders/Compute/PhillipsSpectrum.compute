
/*
Practical Use:
In ocean simulation, this scalar P(k)
P(k) is used to determine the amplitude of each wave in a Fourier-based approach. 
Typically, you would take the square root of Pk
P(k) to get the amplitude, multiply by a random factor (often Gaussian distributed) to add randomness, 
and then use an inverse FFT to transform the frequency domain data 
into a spatial height field representing the ocean surface.

*/

#pragma kernel CS_CalculateInitialSpectrum

#include "HelperFunctions.hlsl"

RWTexture2D<float4> _InitialSpectrumTexture;
float _FrameTime;
float _Wind_DirX;
float _Wind_DirY;
float _WindSpeed;
float _A;
int _PhysicalDomainLength;
int _Resolution;




// Generate the initial Fourier coefficient h0(k) as a complex number.
// h0(k) = 1/sqrt(2) * sqrt(P(k)) * (Gaussian random complex number)
float2 GenerateInitialFourierCoefficient(uint3 id, float2 waveVector,float Resolution)
{
    // Create a unique seed based on the thread's coordinates:
    uint seed = id.x + id.y * (uint)Resolution;
    
    // Generate two random floats in [0, 1]:
    float u1 = hashFloat(seed);
    float u2 = hashFloat(seed + 1);
    
    // Convert to a Gaussian random complex number (with zero mean, unit variance):
    float2 gauss = UniformToGaussian(u1, u2);
    
    // Compute the Phillips spectrum for this wave vector:
    float P = PhillipsSpectrum(_A, _WindSpeed, float2(_Wind_DirX, _Wind_DirY), waveVector);
    
    // Scale the random number by sqrt(P) and normalize:
    float amplitude = sqrt(P) / sqrt(2.0);
    return gauss * amplitude;
}

float2 CalculateTextureSample(float2 WaveVector,float A, float WindSpeed, float2 WindDirection, float2 randomNumber){
    return (1.0f / sqrt(2.0f)) * randomNumber * sqrt(PhillipsSpectrum(A,WindSpeed,WindDirection,WaveVector));
}



[numthreads(8,8,1)]
void CS_CalculateInitialSpectrum (uint3 id : SV_DispatchThreadID) {
    const uint seed = id.x + _Resolution * id.y;
    const float n = id.x - _Resolution/2.0f;
    const float m = id.y - _Resolution/2.0f;



    const float2 WaveVector = float2(n,m) * 2.0 * PI / _PhysicalDomainLength;
    //Calculates PhillipsSpectrum 
    const float P = PhillipsSpectrum(_A,_WindSpeed,float2(_Wind_DirX,_Wind_DirY),WaveVector);
    const float sqrtP = sqrt(P);
    float4 uniforms = float4(hashFloat(seed),hashFloat(seed*seed),hashFloat(seed+1),hashFloat((seed+1)*(seed+1)));
    
    const float4 gaussianRandomComplexNumbers = float4(UniformToGaussian(uniforms.x,uniforms.y),UniformToGaussian(uniforms.z,uniforms.w));

    float2 h0 = CalculateTextureSample(WaveVector,_A,_WindSpeed,float2(_Wind_DirX,_Wind_DirY),gaussianRandomComplexNumbers.xz);
    float2 h0_conjugate = CalculateTextureSample(-WaveVector,_A,_WindSpeed,float2(_Wind_DirX,_Wind_DirY),gaussianRandomComplexNumbers.xz);


    _InitialSpectrumTexture[id.xy] = float4(h0,h0_conjugate);    
}